// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.34
// source: pushclient/pushapi/protos/push.proto

package pushapi

import (
	bytes "bytes"
	context "context"
	errors "errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_pushclient_pushapi_protos_push_proto struct{}

func (drpcEncoding_File_pushclient_pushapi_protos_push_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_pushclient_pushapi_protos_push_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_pushclient_pushapi_protos_push_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_pushclient_pushapi_protos_push_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCPushClient interface {
	DRPCConn() drpc.Conn

	SetToken(ctx context.Context, in *SetTokenRequest) (*Ok, error)
	SubscribeAll(ctx context.Context, in *SubscribeAllRequest) (*Ok, error)
	Notify(ctx context.Context, in *NotifyRequest) (*Ok, error)
}

type drpcPushClient struct {
	cc drpc.Conn
}

func NewDRPCPushClient(cc drpc.Conn) DRPCPushClient {
	return &drpcPushClient{cc}
}

func (c *drpcPushClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcPushClient) SetToken(ctx context.Context, in *SetTokenRequest) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/client.Push/SetToken", drpcEncoding_File_pushclient_pushapi_protos_push_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcPushClient) SubscribeAll(ctx context.Context, in *SubscribeAllRequest) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/client.Push/SubscribeAll", drpcEncoding_File_pushclient_pushapi_protos_push_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcPushClient) Notify(ctx context.Context, in *NotifyRequest) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/client.Push/Notify", drpcEncoding_File_pushclient_pushapi_protos_push_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCPushServer interface {
	SetToken(context.Context, *SetTokenRequest) (*Ok, error)
	SubscribeAll(context.Context, *SubscribeAllRequest) (*Ok, error)
	Notify(context.Context, *NotifyRequest) (*Ok, error)
}

type DRPCPushUnimplementedServer struct{}

func (s *DRPCPushUnimplementedServer) SetToken(context.Context, *SetTokenRequest) (*Ok, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCPushUnimplementedServer) SubscribeAll(context.Context, *SubscribeAllRequest) (*Ok, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCPushUnimplementedServer) Notify(context.Context, *NotifyRequest) (*Ok, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCPushDescription struct{}

func (DRPCPushDescription) NumMethods() int { return 3 }

func (DRPCPushDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/client.Push/SetToken", drpcEncoding_File_pushclient_pushapi_protos_push_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPushServer).
					SetToken(
						ctx,
						in1.(*SetTokenRequest),
					)
			}, DRPCPushServer.SetToken, true
	case 1:
		return "/client.Push/SubscribeAll", drpcEncoding_File_pushclient_pushapi_protos_push_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPushServer).
					SubscribeAll(
						ctx,
						in1.(*SubscribeAllRequest),
					)
			}, DRPCPushServer.SubscribeAll, true
	case 2:
		return "/client.Push/Notify", drpcEncoding_File_pushclient_pushapi_protos_push_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPushServer).
					Notify(
						ctx,
						in1.(*NotifyRequest),
					)
			}, DRPCPushServer.Notify, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterPush(mux drpc.Mux, impl DRPCPushServer) error {
	return mux.Register(impl, DRPCPushDescription{})
}

type DRPCPush_SetTokenStream interface {
	drpc.Stream
	SendAndClose(*Ok) error
}

type drpcPush_SetTokenStream struct {
	drpc.Stream
}

func (x *drpcPush_SetTokenStream) SendAndClose(m *Ok) error {
	if err := x.MsgSend(m, drpcEncoding_File_pushclient_pushapi_protos_push_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCPush_SubscribeAllStream interface {
	drpc.Stream
	SendAndClose(*Ok) error
}

type drpcPush_SubscribeAllStream struct {
	drpc.Stream
}

func (x *drpcPush_SubscribeAllStream) SendAndClose(m *Ok) error {
	if err := x.MsgSend(m, drpcEncoding_File_pushclient_pushapi_protos_push_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCPush_NotifyStream interface {
	drpc.Stream
	SendAndClose(*Ok) error
}

type drpcPush_NotifyStream struct {
	drpc.Stream
}

func (x *drpcPush_NotifyStream) SendAndClose(m *Ok) error {
	if err := x.MsgSend(m, drpcEncoding_File_pushclient_pushapi_protos_push_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
