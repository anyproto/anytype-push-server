// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/anytype-push-server/repo/accountrepo (interfaces: AccountRepo)
//
// Generated by this command:
//
//	mockgen -destination mock_accountrepo/mock_accountrepo.go github.com/anyproto/anytype-push-server/repo/accountrepo AccountRepo
//

// Package mock_accountrepo is a generated GoMock package.
package mock_accountrepo

import (
	context "context"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	domain "github.com/anyproto/anytype-push-server/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountRepo is a mock of AccountRepo interface.
type MockAccountRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepoMockRecorder
	isgomock struct{}
}

// MockAccountRepoMockRecorder is the mock recorder for MockAccountRepo.
type MockAccountRepoMockRecorder struct {
	mock *MockAccountRepo
}

// NewMockAccountRepo creates a new mock instance.
func NewMockAccountRepo(ctrl *gomock.Controller) *MockAccountRepo {
	mock := &MockAccountRepo{ctrl: ctrl}
	mock.recorder = &MockAccountRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepo) EXPECT() *MockAccountRepoMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockAccountRepo) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAccountRepoMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAccountRepo)(nil).Close), ctx)
}

// GetAccountIdsByTopics mocks base method.
func (m *MockAccountRepo) GetAccountIdsByTopics(ctx context.Context, topics []domain.Topic) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountIdsByTopics", ctx, topics)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountIdsByTopics indicates an expected call of GetAccountIdsByTopics.
func (mr *MockAccountRepoMockRecorder) GetAccountIdsByTopics(ctx, topics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountIdsByTopics", reflect.TypeOf((*MockAccountRepo)(nil).GetAccountIdsByTopics), ctx, topics)
}

// GetTopicsByAccountId mocks base method.
func (m *MockAccountRepo) GetTopicsByAccountId(ctx context.Context, accountId string) ([]domain.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicsByAccountId", ctx, accountId)
	ret0, _ := ret[0].([]domain.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicsByAccountId indicates an expected call of GetTopicsByAccountId.
func (mr *MockAccountRepoMockRecorder) GetTopicsByAccountId(ctx, accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicsByAccountId", reflect.TypeOf((*MockAccountRepo)(nil).GetTopicsByAccountId), ctx, accountId)
}

// Init mocks base method.
func (m *MockAccountRepo) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockAccountRepoMockRecorder) Init(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockAccountRepo)(nil).Init), a)
}

// Name mocks base method.
func (m *MockAccountRepo) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockAccountRepoMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAccountRepo)(nil).Name))
}

// Run mocks base method.
func (m *MockAccountRepo) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockAccountRepoMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockAccountRepo)(nil).Run), ctx)
}

// SetAccountTopics mocks base method.
func (m *MockAccountRepo) SetAccountTopics(ctx context.Context, accountId string, topics []domain.Topic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccountTopics", ctx, accountId, topics)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccountTopics indicates an expected call of SetAccountTopics.
func (mr *MockAccountRepoMockRecorder) SetAccountTopics(ctx, accountId, topics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountTopics", reflect.TypeOf((*MockAccountRepo)(nil).SetAccountTopics), ctx, accountId, topics)
}
