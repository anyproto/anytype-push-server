// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/anytype-push-server/repo/spacerepo (interfaces: SpaceRepo)
//
// Generated by this command:
//
//	mockgen -destination mock_spacerepo/mock_spacerepo.go github.com/anyproto/anytype-push-server/repo/spacerepo SpaceRepo
//

// Package mock_spacerepo is a generated GoMock package.
package mock_spacerepo

import (
	context "context"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	domain "github.com/anyproto/anytype-push-server/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockSpaceRepo is a mock of SpaceRepo interface.
type MockSpaceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceRepoMockRecorder
}

// MockSpaceRepoMockRecorder is the mock recorder for MockSpaceRepo.
type MockSpaceRepoMockRecorder struct {
	mock *MockSpaceRepo
}

// NewMockSpaceRepo creates a new mock instance.
func NewMockSpaceRepo(ctrl *gomock.Controller) *MockSpaceRepo {
	mock := &MockSpaceRepo{ctrl: ctrl}
	mock.recorder = &MockSpaceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceRepo) EXPECT() *MockSpaceRepoMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSpaceRepo) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSpaceRepoMockRecorder) Close(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSpaceRepo)(nil).Close), arg0)
}

// Create mocks base method.
func (m *MockSpaceRepo) Create(arg0 context.Context, arg1 domain.Space) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSpaceRepoMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSpaceRepo)(nil).Create), arg0, arg1)
}

// ExistedSpaces mocks base method.
func (m *MockSpaceRepo) ExistedSpaces(arg0 context.Context, arg1 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistedSpaces", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistedSpaces indicates an expected call of ExistedSpaces.
func (mr *MockSpaceRepoMockRecorder) ExistedSpaces(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistedSpaces", reflect.TypeOf((*MockSpaceRepo)(nil).ExistedSpaces), arg0, arg1)
}

// Init mocks base method.
func (m *MockSpaceRepo) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockSpaceRepoMockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockSpaceRepo)(nil).Init), arg0)
}

// Name mocks base method.
func (m *MockSpaceRepo) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSpaceRepoMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSpaceRepo)(nil).Name))
}

// Remove mocks base method.
func (m *MockSpaceRepo) Remove(arg0 context.Context, arg1 domain.Space) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockSpaceRepoMockRecorder) Remove(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSpaceRepo)(nil).Remove), arg0, arg1)
}

// Run mocks base method.
func (m *MockSpaceRepo) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockSpaceRepoMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockSpaceRepo)(nil).Run), arg0)
}
