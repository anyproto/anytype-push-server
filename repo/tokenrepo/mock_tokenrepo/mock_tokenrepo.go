// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/anytype-push-server/repo/tokenrepo (interfaces: TokenRepo)
//
// Generated by this command:
//
//	mockgen -destination mock_tokenrepo/mock_tokenrepo.go github.com/anyproto/anytype-push-server/repo/tokenrepo TokenRepo
//

// Package mock_tokenrepo is a generated GoMock package.
package mock_tokenrepo

import (
	context "context"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	domain "github.com/anyproto/anytype-push-server/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenRepo is a mock of TokenRepo interface.
type MockTokenRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTokenRepoMockRecorder
}

// MockTokenRepoMockRecorder is the mock recorder for MockTokenRepo.
type MockTokenRepoMockRecorder struct {
	mock *MockTokenRepo
}

// NewMockTokenRepo creates a new mock instance.
func NewMockTokenRepo(ctrl *gomock.Controller) *MockTokenRepo {
	mock := &MockTokenRepo{ctrl: ctrl}
	mock.recorder = &MockTokenRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenRepo) EXPECT() *MockTokenRepoMockRecorder {
	return m.recorder
}

// AddToken mocks base method.
func (m *MockTokenRepo) AddToken(arg0 context.Context, arg1 domain.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToken indicates an expected call of AddToken.
func (mr *MockTokenRepoMockRecorder) AddToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToken", reflect.TypeOf((*MockTokenRepo)(nil).AddToken), arg0, arg1)
}

// Close mocks base method.
func (m *MockTokenRepo) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTokenRepoMockRecorder) Close(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTokenRepo)(nil).Close), arg0)
}

// GetActiveTokensByAccountIds mocks base method.
func (m *MockTokenRepo) GetActiveTokensByAccountIds(arg0 context.Context, arg1 []string) ([]domain.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveTokensByAccountIds", arg0, arg1)
	ret0, _ := ret[0].([]domain.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveTokensByAccountIds indicates an expected call of GetActiveTokensByAccountIds.
func (mr *MockTokenRepoMockRecorder) GetActiveTokensByAccountIds(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveTokensByAccountIds", reflect.TypeOf((*MockTokenRepo)(nil).GetActiveTokensByAccountIds), arg0, arg1)
}

// Init mocks base method.
func (m *MockTokenRepo) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockTokenRepoMockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockTokenRepo)(nil).Init), arg0)
}

// Name mocks base method.
func (m *MockTokenRepo) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockTokenRepoMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTokenRepo)(nil).Name))
}

// RevokeToken mocks base method.
func (m *MockTokenRepo) RevokeToken(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeToken indicates an expected call of RevokeToken.
func (mr *MockTokenRepoMockRecorder) RevokeToken(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeToken", reflect.TypeOf((*MockTokenRepo)(nil).RevokeToken), arg0, arg1, arg2)
}

// Run mocks base method.
func (m *MockTokenRepo) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockTokenRepoMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockTokenRepo)(nil).Run), arg0)
}

// UpdateTokenStatus mocks base method.
func (m *MockTokenRepo) UpdateTokenStatus(arg0 context.Context, arg1 string, arg2 domain.TokenStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTokenStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTokenStatus indicates an expected call of UpdateTokenStatus.
func (mr *MockTokenRepoMockRecorder) UpdateTokenStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTokenStatus", reflect.TypeOf((*MockTokenRepo)(nil).UpdateTokenStatus), arg0, arg1, arg2)
}
